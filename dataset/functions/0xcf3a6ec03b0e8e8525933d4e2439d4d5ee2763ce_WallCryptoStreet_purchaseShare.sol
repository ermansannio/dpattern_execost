contract WallCryptoStreet {
function purchaseShare(uint _shareId) public payable {
        require(msg.value == shares[_shareId].curPrice);
    
        uint256 commission1percent = (msg.value / 100);
        /*
        We check if this is the first purchase of a share or a "repurchase".
        If it's the first purchase we transfer a larger commission to the company owner
        */
        if(shares[_shareId].ownerAddress == cfoAddress) {
            // This is the initial sale
            companies[shares[_shareId].companyId].ownerAddress.transfer(commission1percent * 80); // 80% goes to the company owner
            cfoAddress.transfer(commission1percent * 20);    // 20% goes to the dev
        } else {
            // This is a consecutive sale
            shares[_shareId].ownerAddress.transfer(commission1percent * 85);    // 85% goes to the previous shareholder
            companies[shares[_shareId].companyId].ownerAddress.transfer(commission1percent * 10); // 10% goes to the company owner
            cfoAddress.transfer(commission1percent * 5);    // 5% goes to the dev
        }
        // Decrement count shares previous user
        addressSharesCount[shares[_shareId].ownerAddress]--;
        
        // Update the owner of the share
        shares[_shareId].ownerAddress = msg.sender;
        addressSharesCount[msg.sender]++;
        
        // Raise the price of the share
        shares[_shareId].curPrice = shares[_shareId].curPrice + (shares[_shareId].curPrice / 2);
        
        // Increment volume generated by company
        companies[shares[_shareId].companyId].volume = companies[shares[_shareId].companyId].volume + msg.value;
    }
}